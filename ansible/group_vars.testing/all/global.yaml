---
commercial:
  enabled: true
  registry:
    url: harbor.cloudical.net
    username: 'gitlab-testing-stage'
    key: 'REGISTRY_KEY'
global:
  registry: harbor.vanillastack.io
  isHA: true
  uuid: "ee582ffa-f6ba-11ea-adc1-0242ac120002"
  externalLB: false
ingress:
  namespace: nginx-ingress
  enabled: true
tls:
  # possible issuer: "letsencrypt-staging", "letsencrypt-prod" or "certmanager-selfsigned"
  issuerName: "letsencrypt-staging"
  issuerEmail: "testing@test.vanillastack.cloudical.net"
  staging:
    rootCACert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZBVENDQXVtZ0F3SUJBZ0lSQUtjOVpLQkFTeW15NVRMT0VwNTdOOTh3RFFZSktvWklodmNOQVFFTEJRQXcKR2pFWU1CWUdBMVVFQXd3UFJtRnJaU0JNUlNCU2IyOTBJRmd4TUI0WERURTJNRE15TXpJeU5UTTBObG9YRFRNMgpNRE15TXpJeU5UTTBObG93R2pFWU1CWUdBMVVFQXd3UFJtRnJaU0JNUlNCU2IyOTBJRmd4TUlJQ0lqQU5CZ2txCmhraUc5dzBCQVFFRkFBT0NBZzhBTUlJQ0NnS0NBZ0VBK3BZSHZRdzVpVTN2MmIzaU51WU5LWWdzV0Q2S1U3YUoKZGlkZHRaUXhTV1l6VUkzVTBJMVVzUlBUeG5oVGlmcy9NOU5XNFpsVjEzWmZCN0FQd0M4b3FLT0lpd283SXdsUAp4ZzBWS2d5eitrVDhSSmZZcjY2UFBJWVAwZnBUZXU0MkxwTUorQ0tvOXNicGdWTkRaTjJ6L3FpWHJSTlgvVnRHClRrUFY3YTQ0Zlo1YkhIVnJ1QXh2RG55bHBReEpvYnRDQldsSlNzYklSR0ZITWMyejg4ZVV6OU5tSU9XVUtHR2oKRW1QNzZ4OE9mUkhwSXB1eFJTQ2puMCtpOStoUjJzaUlPcGNNT0dkKzQwdVZKeGJSUlA1WlhuVUZhMmZGNUZXZApPMHUwUlBJOEhPTjBvdmhyd1BKWSs0ZVdLa1F6eUM2MTFvTFBZR1E0RWJpZlJzVHNDeFVacXlVdVN0R3lwOG9hCmFvU0tmRjZYMCtLekdnd3ducmpSVFVwSWwxOUE5MktSME5vbzZoNjIyT1grNHNaaU8vSlFka3VYNXcvSHVwSzAKQTBNMFdTTUN2VTZHT2hqR290bWgyVlRFSndISFk0K1RVazBpUVlSdHYxY3JPTmtseVpvQVFQRDc2aENyQzhDcgpJYmdzWkxmVE1DOFRXVW9NYnlVRGd2Z1lrSEtNb1BtMFZHVlZ1d3BSS0p4djcrMndYTytwaXZyclVsMlE5ZlBlCktrMDU1bkpMTVY5eVBVZGlnOG90aFVLclJmU3hsaTk0NkFFVjFlRU9oeGRkZkV3QkUzTHQyeG4waGhpSWVkYmIKRnRmLzVrRVdGWmtYeVVtTUpLOFJhNzZLdXMyQUJ1ZVVWRWNaNDhoclJyMUhmMU45bjU5VmJUVWFYZ2VpWkE1MApxWGYyYnltRTZGOENBd0VBQWFOQ01FQXdEZ1lEVlIwUEFRSC9CQVFEQWdFR01BOEdBMVVkRXdFQi93UUZNQU1CCkFmOHdIUVlEVlIwT0JCWUVGTUVtZEtTS1JLRG0raUFvMkZ3am1rV0lHSG5nTUEwR0NTcUdTSWIzRFFFQkN3VUEKQTRJQ0FRQkNQdzc0TTlYL1h4MDRLMVZBRVMzeXBnUVlINWJmOUZYVkRyd2hSRlNWY2tyaWEvN2RNem9GNXdsbgp1cTlOR3Nqa2trRGcxN0FvaGNRZHI4YWxINEx2UGR4cEtyM0JqcHZFY21icUY4eEgrTWJiZVVFbm1iU2ZMSThICnNlZnVoWEY5QUYvOWlZdnBWTkM4Rm1KME9oaVZ2MTNWZ01RdzBDUktrYnRqWkJmOHhhRWhxL1lxeFdWc2dPam0KZG01Q0FRMlgwYVg3NTAyeDh3WVJnTW5aaEE1Z29DMXpWV0JWQWk4eWhobWxoaG9EVWZnMTdjWGttYUpDNXBEZApvZW5aOU5WaFc4ZURiMDNNRkNyV052SWg4OUREZUNHV3VXZkRsdERxMG4zb3d5TDBJZVNuN1JmcFNjbHB4Vm1WCi81M2prWWp3SWd4SUc3R3N2MExLTWJzZjZRZEJjVGpodmZaeU1JcEJSa1RlM3p1SGQyZmVLelk5bEVrYlJ2UlEKemJoNFBzNVlCbkc2Q0tKUFRiZTJoZmkzbmhudy9NeUVtRjN6YjBoenZMV05yUjlYVzNpYmIyb0wzNDI0WE93YwpWanJUU0NMek85UnY2czV3aTAzcW9XdktBUVFBRWxxVFlSSGh5bkozdzZ3dXZLWUY1emNaRjNNRG5yVkdMYmgxClE5ZVBSRkJDaVhPUTZ3UExvVWhycmJaOExwRlVGWURYSE10WU03UDlzYzlJQVdvT05YUkVKYU8wOHpnRnRNcDQKOGl5SVlVeVFBYnN2eDhvRDJNOGtSdnJJUlNyUkpTbDZMOTU3YjRBRmlMSVEvR2dWMmN1cnMwamplN0VkeDM0YwppZFd3MVZyZWp0d2Nsb2JxTk1WdEczRWlQVUlwSkdwYk1jSmdiaUxTbUtrcnZRdEduZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  prod:
    rootCACert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZhekNDQTFPZ0F3SUJBZ0lSQUlJUXo3RFNRT05aUkdQZ3UyT0Npd0F3RFFZSktvWklodmNOQVFFTEJRQXcKVHpFTE1Ba0dBMVVFQmhNQ1ZWTXhLVEFuQmdOVkJBb1RJRWx1ZEdWeWJtVjBJRk5sWTNWeWFYUjVJRkpsYzJWaApjbU5vSUVkeWIzVndNUlV3RXdZRFZRUURFd3hKVTFKSElGSnZiM1FnV0RFd0hoY05NVFV3TmpBME1URXdORE00CldoY05NelV3TmpBME1URXdORE00V2pCUE1Rc3dDUVlEVlFRR0V3SlZVekVwTUNjR0ExVUVDaE1nU1c1MFpYSnUKWlhRZ1UyVmpkWEpwZEhrZ1VtVnpaV0Z5WTJnZ1IzSnZkWEF4RlRBVEJnTlZCQU1UREVsVFVrY2dVbTl2ZENCWQpNVENDQWlJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0NBZ29DZ2dJQkFLM29KSFAwRkRmem01NHJWeWdjCmg3N2N0OTg0a0l4dVBPWlhvSGozZGNLaS92VnFidllBVHlqYjNtaUdiRVNUdHJGai9SUVNhNzhmMHVveG15RisKMFRNOHVrajEzWG5mczdqL0V2RWhta3ZCaW9aeGFVcG1abXlQZmp4d3Y2MHBJZ2J6NU1EbWdLN2lTNCszbVg2VQpBNS9UUjVkOG1VZ2pVK2c0cms4S2I0TXUwVWxYaklCMHR0b3YwRGlOZXdOd0lSdDE4akE4K28rdTNkcGpxK3NXClQ4S09FVXQrend2by83VjNMdlN5ZTByZ1RCSWxESENOQXltZzRWTWs3QlBaN2htL0VMTktqRCtKbzJGUjNxeUgKQjVUMFkzSHNMdUp2VzVpQjRZbGNOSGxzZHU4N2tHSjU1dHVrbWk4bXhkQVE0UTdlMlJDT0Z2dTM5NmozeCtVQwpCNWlQTmdpVjUrSTNsZzAyZFo3N0RuS3hIWnU4QS9sSkJkaUIzUVcwS3RaQjZhd0JkcFVLRDlqZjFiMFNIelV2CktCZHMwcGpCcUFsa2QyNUhON3JPckZsZWFKMS9jdGFKeFFaQktUNVpQdDBtOVNUSkVhZGFvMHhBSDBhaG1iV24KT2xGdWhqdWVmWEtuRWdWNFdlMCtVWGdWQ3dPUGpkQXZCYkkrZTBvY1MzTUZFdnpHNnVCUUUzeERrM1N6eW5UbgpqaDhCQ05BdzFGdHhOclFIdXNFd01GeEl0NEk3bUtaOVlJcWlveW1DekxxOWd3UWJvb01EUWFIV0JmRWJ3cmJ3CnFIeUdPMGFvU0NxSTNIYWFkcjhmYXFVOUdZL3JPUE5rM3NnckRRb28vL2ZiNGhWQzFDTFFKMTNoZWY0WTUzQ0kKclU3bTJZczZ4dDBuVVc3L3ZHVDFNME5QQWdNQkFBR2pRakJBTUE0R0ExVWREd0VCL3dRRUF3SUJCakFQQmdOVgpIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJSNXRGbm1lN2JsNUFGemdBaUl5QnBZOXVtYmJqQU5CZ2txCmhraUc5dzBCQVFzRkFBT0NBZ0VBVlI5WXFieXlxRkRRRExIWUdta2dKeWtJckdGMVhJcHUrSUxsYVMvVjlsWkwKdWJoekVGblRJWmQrNTB4eCs3TFNZSzA1cUF2cUZ5RldoZkZRRGxucnp1Qlo2YnJKRmUrR25ZK0VnUGJrNlpHUQozQmViWWh0RjhHYVYwbnh2d3VvNzd4L1B5OWF1Si9HcHNNaXUvWDErbXZvaUJPdi8yWC9xa1NzaXNSY09qL0tLCk5GdFkyUHdCeVZTNXVDYk1pb2d6aVV3dGhEeUMzKzZXVndXNkxMdjN4TGZIVGp1Q3ZqSElJbk56a3RIQ2dLUTUKT1JBekk0Sk1QSitHc2xXWUhiNHBob3dpbTU3aWF6dFhPb0p3VGR3Sng0bkxDZ2ROYk9oZGpzbnZ6cXZIdTdVcgpUa1hXU3RBbXpPVnl5Z2hxcFpYakZhSDNwTzNKTEYrbCsvK3NLQUl1dnRkN3UrTnhlNUFXMHdkZVJsTjhOd2RDCmpOUEVscHpWbWJVcTRKVWFnRWl1VERrSHpzeEhwRktWSzdxNCs2M1NNMU45NVIxTmJkV2hzY2RDYitaQUp6VmMKb3lpM0I0M25qVE9RNXlPZisxQ2NlV3hHMWJRVnM1WnVmcHNNbGpxNFVpMC8xbHZoK3dqQ2hQNGtxS09KMnF4cQo0Umdxc2FoRFlWdlRIOXc3alhieUxlaU5kZDhYTTJ3OVUvdDd5MEZmLzl5aTBHRTQ0WmE0ckYyTE45ZDExVFBBCm1SR3VuVUhCY25XRXZnSkJRbDluSkVpVTBac252Z2MvdWJoUGdYUlI0WHEzN1owajRyN2cxU2dFRXp3eEE1N2QKZW15UHhnY1l4bi9lUjQ0L0tKNEVCcytsVkRSM3ZleUptK2tYUTk5YjIxLytqaDVYb3MxQW5YNWlJdHJlR0NjPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==

kubernetes:
  loadBalancer:
    virtualIP: 135.181.48.19
    clusterDomain: test.vanillastack.cloudical.net
  dashboard:
    enabled: true
    prefix: "k8sboard"
  clusterName: kube
  version: "1.19"
  crioVersion: "1.18"
  helm_version: "v3.3.1"
  pod_cidr: "172.16.0.0/12"
  service_cidr: "172.31.0.0/16"
  init_opts: ""
  kubeadm_opts: ""
  resetCluster: false
  kubeadmin_config: /etc/kubernetes/admin.conf
  cilium:
    version: v1.8.5
cloudfoundry:
  enabled: true
  storageclass: rook-ceph-block
  coreDomain: "cf.{{ kubernetes.loadBalancer.clusterDomain }}"
stratos:
  enabled: true
  adminpassword: 4JOA4l8DK7Sr
  coreDomain: "stratos.{{ kubernetes.loadBalancer.clusterDomain }}"
guacamole:
  imageTag: 202009100849
  enabled: false
  namespace: guacamole
  coreDomain: "guacamole.{{ kubernetes.loadBalancer.clusterDomain }}"
  postgres:
    maxConnections: 400
    backup:
      enabled: false
      cronjob: "30 */2 * * *"
    version: "12"
    replicas: "2"
    size: "20Gi"
postgresOperator:
  enabled: true
  chartName: "postgres-operator"
  chartVersion: "1.5.0"
  namespace: "postgres-operator"
  backup:
    enabled: false
    s3:
      accessKey: nul
      secretKey: nul
      regionName: nul
      endpoint: nul
      bucketName: nul
    cron: "30 00 * * *"
redis:
  enabled: true
  namespace: "testing"
  name: "redis-cluster"
  global:
    imagetag: "2.0"
    password: "Opstree@1235"
  operator:
    imagetag: "v0.2"
  exporter:
    imagetag: "1.0"    
harbor:
  enabled: true
  chartVersion: 1.5.1
  namespace: harbor
  ingress:
    coreDomain: "harbor.{{ kubernetes.loadBalancer.clusterDomain }}"
    notaryDomain: "notary.{{ kubernetes.loadBalancer.clusterDomain }}"
  tls:
    enabled: true
  portal:
    replicas: 1
  core:
    replicas: 1
  jobservice:
    replicas: 1
    persistence:
      storageClass: rook-ceph-block
      size: 15Gi
  registry:
    replicas: 1
    persistence:
      storageClass: rook-ceph-block
      size: 10Gi
  chartmuseum:
    enabled: true
    replicas: 1
    persistence:
      storageClass: rook-ceph-block
      size: 5Gi
  clair:
    enabled: true
    replicas: 1
  trivy:
    enabled: true
    replicas: 1
    persistence:
      storageClass: rook-ceph-block
      size: 5Gi
  notary:
    enabled: true
    replicas: 1
  auth:
    password: 02ZVPokFHXPHfSfkfQGCWIfmJ
    # secret lenght must be 16
    secret: p1zX2AazSCwtUfmv
  redis:
    chartVersion: 10.8.1
    password: zP7GPoCnFNa6XiVnsLVJ3jJgw
    persistence:
      storageClass: "rook-ceph-block"
      size: 8Gi
  postgres:
    size: "20Gi"
    replicas: 2
    version: "12"
    maxConnections: 400
    backup:
      enabled: false
      cronjob: "30 */2 * * *"
efkstack:
  enabled: true
  imageTag: "7.9.1"
  kibana:
    user: kibana_test
    password: secretlysecretpassword
    replicas: 2
    system_user: "{{ ansible_user }}"
    system_group: "{{ ansible_user }}"
    coreDomain: "kibana.{{ kubernetes.loadBalancer.clusterDomain }}"
    resources:
      requests:
        cpu: "200m"
        memory: "1Gi"
      limits:
        cpu: "1000m"
        memory: "2Gi"
  es:
    replicas: 3
    storage:
      class_name: "rook-ceph-block"
      size: "30Gi"
    resources:
      requests:
        cpu: "200m"
        memory: "2Gi"
      limits:
        cpu: "1000m"
        memory: "2Gi"
  logaggregator:
    # Choice of filebeat and fluentd
    name: filebeat
    resources:
      limits:
        cpu: "500m"
        memory: "512Mi"
      requests:
        cpu: "100m"
        memory: "200Mi"
prometheus:
  enabled: true
  admin_user: admin
  admin_password: prompassword
  ingress:
    enabled: true
    dns: "prometheus.{{ kubernetes.loadBalancer.clusterDomain }}"
  storage:
    classname: "rook-ceph-block"
    size: 30Gi
  resources:
    limits:
      cpu: 2500m
      memory: 2048Mi
    requests:
      cpu: 200m
      memory: 512Mi
  kubeApiServer:
    enabled: true
  kubelet:
    enabled: true
  kubeControllerManager:
    enabled: true
  coreDns:
    enabled: true
  kubeDns:
    enabled: false
  kubeEtcd:
    enabled: true
  kubeScheduler:
    enabled: true
  kubeProxy:
    enabled: true
  kubeStateMetrics:
    enabled: true
alertmanager:
  enabled: true
  admin_user: admin
  admin_password: ampassword
  ingress:
    enabled: true
    dns: "alertmanager.{{ kubernetes.loadBalancer.clusterDomain }}"
  storage:
    classname: "rook-ceph-block"
    size: 10Gi
  resources:
    limits:
      cpu: 2500m
      memory: 2048Mi
    requests:
      cpu: 200m
      memory: 512Mi
  config: |
    global:
      resolve_timeout: 5m
    route:
      group_by: ['job']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: 'null'
      routes:
      - match:
          alertname: Watchdog
        receiver: 'null'
    receivers:
    - name: 'null'
grafana:
  enabled: true
  admin_user: admin
  admin_password: grafanapassword
  ingress:
    enabled: true
    dns: "grafana.{{ kubernetes.loadBalancer.clusterDomain }}"
kubevirt:
  enabled: true
  namespace: kubevirt
  version: v0.33.0
moodle:
  username: admin
  enabled: false
  namespace: moodle
  storage:
    classname: "rook-ceph-block"
    size: 8Gi
  mariadb:
    persistence: true
    classname: "rook-ceph-block"
    size: 8Gi
  ingress:
    enabled: true
    dns: "moodle.{{ kubernetes.loadBalancer.clusterDomain }}"
keycloak:
  enabled: true
  namespace: keycloak
  externalDatabase: false
  postgres:
    size: "20Gi"
    replicas: 2
    version: "12"
    maxConnections: 400
    backup:
      enabled: false
      cronjob: "30 */2 * * *"
  ingress:
    enabled: true
    publicDomain: "keycloak.{{ kubernetes.loadBalancer.clusterDomain }}"
  realm:
    name: "{{ kubernetes.loadBalancer.clusterDomain }}"
    id: "{{ kubernetes.loadBalancer.clusterDomain }}"
