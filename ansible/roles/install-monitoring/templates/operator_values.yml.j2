nameOverride: "monitoring"

namespaceOverride: "monitoring"

kubeTargetVersionOverride: "{{ kubernetes.version }}"

fullnameOverride: "prometheus-operator"

commonLabels: {}

defaultRules:
  create: true
  rules:
    alertmanager: true
    etcd: true
    general: true
    k8s: true
    kubeApiserver: true
    kubeApiserverAvailability: true
    kubeApiserverError: true
    kubeApiserverSlos: true
    kubelet: true
    kubePrometheusGeneral: true
    kubePrometheusNodeAlerting: true
    kubePrometheusNodeRecording: true
    kubernetesAbsent: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    kubeScheduler: true
    kubeStateMetrics: true
    network: true
    node: true
    prometheus: true
    prometheusOperator: true
    time: true

  runbookUrl: https://github.com/kubernetes-monitoring/kubernetes-mixin/tree/master/runbook.md#
  appNamespacesTarget: ".*"

  labels: {}
  annotations: {}

additionalPrometheusRules: []

global:
  rbac:
    create: true
    pspEnabled: true
    pspAnnotations: {}

  imagePullSecrets: []

alertmanager:
  enabled: {{ alertmanager.enabled }}
  apiVersion: v2
  serviceAccount:
    create: true
    name: ""
    annotations: {}
  podDisruptionBudget:
    enabled: false
    minAvailable: 1
    maxUnavailable: ""
  config:
    global:
      resolve_timeout: 5m
    route:
      group_by: ['job']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: 'null'
      routes:
      - match:
          alertname: Watchdog
        receiver: 'null'
    receivers:
    - name: 'null'
  tplConfig: false
  templateFiles: {}

  ingress:
    enabled: "{{ alertmanager.ingress.enabled }}"
    annotations:
      nginx.ingress.kubernetes.io/proxy-body-size: 1024m
      cert-manager.io/cluster-issuer: {{ tls.issuerName }}
      kubernetes.io/tls-acme: "true"
      nginx.ingress.kubernetes.io/auth-secret: alertmanager-basic-auth
      nginx.ingress.kubernetes.io/auth-type: basic
      nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"

    labels: {}
    hosts:
      - "{{ alertmanager.ingress.dns }}"
    paths:
      - /
    tls:
    - hosts:
      - "{{ alertmanager.ingress.dns }}"
      secretName: alertmanager-ingress-tls
  secret:
    annotations: {}

  ingressPerReplica:
    enabled: false
    annotations: {}
    labels: {}
    hostPrefix: ""
    hostDomain: ""

    paths: []
    tlsSecretName: ""
    tlsSecretPerReplica:
      enabled: false
      prefix: "alertmanager"

  service:
    annotations: {}
    labels: {}
    clusterIP: ""

    port: 9093
    targetPort: 9093
    nodePort: 30903
    externalIPs: []
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    type: ClusterIP

  servicePerReplica:
    enabled: false
    annotations: {}
    port: 9093
    targetPort: 9093
    nodePort: 30904
    loadBalancerSourceRanges: []
    type: ClusterIP

  serviceMonitor:
    interval: ""
    selfMonitor: true
    metricRelabelings: []
    relabelings: []
  alertmanagerSpec:
    podMetadata: {}
    image:
{% if commercial.enabled %}
      repository: {{commercial.registry.url}}/vanillastack/alertmanager
{% else %}
      repository: quay.io/prometheus/alertmanager
{% endif %}
      tag: v0.21.0
      sha: ""
    useExistingSecret: false
    secrets: []
    configMaps: []
    logFormat: logfmt
    logLevel: info
    replicas: 1
    retention: 120h
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: {{ alertmanager.storage.classname }}
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: {{ alertmanager.storage.size }}
    externalUrl: "https://{{ alertmanager.ingress.dns }}"
    routePrefix: /
    paused: false
    nodeSelector: {}
    resources:
      limits:
        cpu: {{ alertmanager.resources.limits.cpu }}
        memory: {{ alertmanager.resources.limits.memory }}
      requests:
        cpu: {{ alertmanager.resources.requests.cpu }}
        memory: {{ alertmanager.resources.requests.memory }}
    podAntiAffinity: ""
    podAntiAffinityTopologyKey: kubernetes.io/hostname
    affinity: {}
    tolerations: []
    securityContext:
      runAsGroup: 2000
      runAsNonRoot: true
      runAsUser: 1000
      fsGroup: 2000
    listenLocal: false
    containers: []
    priorityClassName: ""
    additionalPeers: []
    portName: "web"

grafana:
  enabled: {{ grafana.enabled }}
  namespaceOverride: "monitoring"
  defaultDashboardsEnabled: true

  adminPassword: "{{ grafana.admin_password }}"

  ingress:
    enabled: "{{ grafana.ingress.enabled }}"
    annotations:
      nginx.ingress.kubernetes.io/proxy-body-size: 1024m
      cert-manager.io/cluster-issuer: {{ tls.issuerName }}
      kubernetes.io/tls-acme: "true"
    labels: {}
    hosts:
      - "{{ grafana.ingress.dns }}"
    path: /
    tls:
    - hosts:
      - "{{ grafana.ingress.dns }}"
      secretName: grafana-ingress-tls

  sidecar:
    dashboards:
      enabled: true
      label: grafana_dashboard
      annotations: {}
    datasources:
      enabled: true
      defaultDatasourceEnabled: true
      annotations: {}
      createPrometheusReplicasDatasources: false
      label: grafana_datasource

  extraConfigmapMounts: []

  additionalDataSources: []

  service:
    portName: service

  serviceMonitor:
    interval: ""
    selfMonitor: true

    metricRelabelings: []
    relabelings: []

kubeApiServer:
  enabled: true
  tlsConfig:
    serverName: kubernetes
    insecureSkipVerify: false

  relabelings: []

  serviceMonitor:
    interval: ""
    jobLabel: component
    selector:
      matchLabels:
        component: apiserver
        provider: kubernetes
    metricRelabelings: []

kubelet:
  enabled: true
  namespace: kube-system
  serviceMonitor:
    interval: ""
    https: true
    cAdvisor: true
    probes: true
    resource: true
    resourcePath: "/metrics/resource/v1alpha1"
    cAdvisorMetricRelabelings: []
    probesMetricRelabelings: []
    cAdvisorRelabelings:
      - sourceLabels: [__metrics_path__]
        targetLabel: metrics_path

    probesRelabelings:
      - sourceLabels: [__metrics_path__]
        targetLabel: metrics_path

    resourceRelabelings:
      - sourceLabels: [__metrics_path__]
        targetLabel: metrics_path

    metricRelabelings: []
    relabelings:
      - sourceLabels: [__metrics_path__]
        targetLabel: metrics_path

kubeControllerManager:
  enabled: {{ prometheus.kubeControllerManager.enabled }}
  endpoints: []
  service:
    port: 10252
    targetPort: 10252

  serviceMonitor:
    interval: ""
    https: false
    insecureSkipVerify: null
    serverName: null
    metricRelabelings: []
    relabelings: []

coreDns:
  enabled: {{ prometheus.coreDns.enabled }}
  service:
    port: 9153
    targetPort: 9153
  serviceMonitor:
    interval: ""
    metricRelabelings: []
    relabelings: []

kubeDns:
  enabled: {{ prometheus.kubeDns.enabled }}
  service:
    dnsmasq:
      port: 10054
      targetPort: 10054
    skydns:
      port: 10055
      targetPort: 10055
  serviceMonitor:
    interval: ""
    metricRelabelings: []
    relabelings: []
    dnsmasqMetricRelabelings: []
    dnsmasqRelabelings: []

kubeEtcd:
  enabled: {{ prometheus.kubeEtcd.enabled }}
  endpoints: []
  service:
    port: 2379
    targetPort: 2379

  serviceMonitor:
    interval: ""
    scheme: https
    insecureSkipVerify: true
    serverName: ""
    caFile: ""
    certFile: /etc/prometheus/secrets/etcd-certs/client.crt
    keyFile: /etc/prometheus/secrets/etcd-certs/client.key
    metricRelabelings: []
    relabelings: []

kubeScheduler:
  enabled: {{ prometheus.kubeScheduler.enabled }}
  endpoints: []
  service:
    port: 10251
    targetPort: 10251

  serviceMonitor:
    interval: ""
    https: false
    insecureSkipVerify: null
    serverName: null
    metricRelabelings: []
    relabelings: []

kubeProxy:
  enabled: {{ prometheus.kubeProxy.enabled }}
  endpoints: []

  service:
    port: 10249
    targetPort: 10249

  serviceMonitor:
    interval: ""
    https: false
    metricRelabelings: []
    relabelings: []

kubeStateMetrics:
  enabled: {{ prometheus.kubeStateMetrics.enabled }}
  serviceMonitor:
    interval: ""
    metricRelabelings: []
    relabelings: []

kube-state-metrics:
  namespaceOverride: ""
  rbac:
    create: true
  podSecurityPolicy:
    enabled: true

nodeExporter:
  enabled: true
  jobLabel: jobLabel

  serviceMonitor:
    interval: ""
    scrapeTimeout: ""
    metricRelabelings: []
    relabelings: []

prometheus-node-exporter:
  namespaceOverride: ""
  podLabels:
    jobLabel: node-exporter
  extraArgs:
    - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+)($|/)
    - --collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|cgroup|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|mqueue|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|sysfs|tracefs)$

prometheusOperator:
  enabled: true
  manageCrds: true

  tlsProxy:
    enabled: true
    image:
{% if commercial.enabled %}
      repository: {{commercial.registry.url}}/vanillastack/ghostunnel
{% else %}
      repository: squareup/ghostunnel
{% endif %}
      tag: v1.5.2
      sha: ""
      pullPolicy: IfNotPresent
    resources: {}

  admissionWebhooks:
    failurePolicy: Fail
    enabled: true
    patch:
      enabled: true
      image:
{% if commercial.enabled %}
        repository: {{commercial.registry.url}}/vanillastack/kube-webhook-certgen
{% else %}
        repository: jettech/kube-webhook-certgen
{% endif %}
        tag: v1.3.0
        sha: ""
        pullPolicy: IfNotPresent
      resources: {}
      priorityClassName: ""
      podAnnotations: {}
      nodeSelector: {}
      affinity: {}
      tolerations: []
  namespaces: {}
  denyNamespaces: []
  serviceAccount:
    create: true
    name: ""
  service:
    annotations: {}
    labels: {}
    clusterIP: ""
    nodePort: 30080

    nodePortTls: 30443
    additionalPorts: []
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    type: ClusterIP
    externalIPs: []
  createCustomResource: true
  cleanupCustomResource: false
  podLabels: {}
  podAnnotations: {}
  kubeletService:
    enabled: true
    namespace: kube-system

  serviceMonitor:
    interval: ""
    scrapeTimeout: ""
    selfMonitor: true
    metricRelabelings: []
    relabelings: []
  hostNetwork: false
  nodeSelector: {}
  tolerations: []
  affinity: {}
  securityContext:
    fsGroup: 65534
    runAsGroup: 65534
    runAsNonRoot: true
    runAsUser: 65534
  image:
{% if commercial.enabled %}
    repository: {{commercial.registry.url}}/vanillastack/prometheus-operator
{% else %}
    repository: quay.io/coreos/prometheus-operator
{% endif %}
    tag: v0.38.1
    sha: ""
    pullPolicy: IfNotPresent
  configmapReloadImage:
{% if commercial.enabled %}
    repository: {{commercial.registry.url}}/vanillastack/configmap-reload
{% else %}
    repository: docker.io/jimmidyson/configmap-reload
{% endif %}
    tag: v0.3.0
    sha: ""
  prometheusConfigReloaderImage:
{% if commercial.enabled %}
    repository: {{commercial.registry.url}}/vanillastack/prometheus-config-reloader
{% else %}
    repository: quay.io/coreos/prometheus-config-reloader
{% endif %}
    tag: v0.38.1
    sha: ""
  configReloaderCpu: 100m
  configReloaderMemory: 25Mi
  hyperkubeImage:
{% if commercial.enabled %}
    repository: {{commercial.registry.url}}/vanillastack/hyperkube
{% else %}
    repository: k8s.gcr.io/hyperkube
{% endif %}
    tag: v1.16.12
    sha: ""
    pullPolicy: IfNotPresent

prometheus:
  enabled: {{ prometheus.enabled }}
  annotations: {}
  serviceAccount:
    create: true
    name: ""
  service:
    annotations: {}
    labels: {}
    clusterIP: ""
    port: 9090
    targetPort: 9090
    externalIPs: []
    nodePort: 30090
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    type: ClusterIP

    sessionAffinity: ""

  servicePerReplica:
    enabled: false
    annotations: {}
    port: 9090
    targetPort: 9090
    nodePort: 30091
    loadBalancerSourceRanges: []
    type: ClusterIP
  podDisruptionBudget:
    enabled: false
    minAvailable: 1
    maxUnavailable: ""

  thanosIngress:
    enabled: false
    annotations: {}
    labels: {}
    servicePort: 10901
    hosts: []
    paths: []
    tls: []

  ingress:
    enabled: "{{ prometheus.ingress.enabled }}"
    annotations:
      nginx.ingress.kubernetes.io/proxy-body-size: 1024m
      cert-manager.io/cluster-issuer: {{ tls.issuerName }}
      kubernetes.io/tls-acme: "true"
      nginx.ingress.kubernetes.io/auth-secret: prometheus-basic-auth
      nginx.ingress.kubernetes.io/auth-type: basic
      nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"
    labels: {}
    hosts:
      - "{{ prometheus.ingress.dns }}"
    paths:
      - /
    tls:
    - hosts:
      - "{{ prometheus.ingress.dns }}"
      secretName: prometheus-ingress-tls

  ingressPerReplica:
    enabled: false
    annotations: {}
    labels: {}
    hostPrefix: ""
    hostDomain: ""
    paths: []
    tlsSecretName: ""
    tlsSecretPerReplica:
      enabled: false
      prefix: "prometheus"

  podSecurityPolicy:
    allowedCapabilities: []

  serviceMonitor:
    interval: ""
    selfMonitor: false
    scheme: ""
    tlsConfig: {}
    bearerTokenFile:
    metricRelabelings: []
    relabelings: []

  prometheusSpec:
    disableCompaction: false
    apiserverConfig: {}
    scrapeInterval: ""
    evaluationInterval: ""
    listenLocal: false
    enableAdminAPI: false
    image:
{% if commercial.enabled %}
      repository: {{commercial.registry.url}}/vanillastack/prometheus
{% else %}
      repository: quay.io/prometheus/prometheus
{% endif %}
      tag: v2.18.2
      sha: ""
    tolerations: []
    alertingEndpoints: []
    externalLabels: {}
    replicaExternalLabelName: ""
    replicaExternalLabelNameClear: false
    prometheusExternalLabelName: ""
    prometheusExternalLabelNameClear: false
    externalUrl: "https://{{ prometheus.ingress.dns }}"
    nodeSelector: {}
    secrets:
      - etcd-certs
    configMaps: []
    query: {}
    ruleNamespaceSelector: {}
    ruleSelectorNilUsesHelmValues: true
    ruleSelector: {}
    serviceMonitorSelectorNilUsesHelmValues: true
    serviceMonitorSelector: {}
    serviceMonitorNamespaceSelector: {}
    podMonitorSelectorNilUsesHelmValues: true
    podMonitorSelector: {}
    podMonitorNamespaceSelector: {}
    retention: 10d
    retentionSize: ""
    walCompression: false
    paused: false
    replicas: 1
    logLevel: info
    logFormat: logfmt
    routePrefix: /
    podMetadata: {}
    podAntiAffinity: ""
    podAntiAffinityTopologyKey: kubernetes.io/hostname
    affinity: {}
    remoteRead: []
    remoteWrite: []
    remoteWriteDashboards: false
    resources:
      limits:
        cpu: {{ prometheus.resources.limits.cpu }}
        memory: {{ prometheus.resources.limits.memory }}
      requests:
        cpu: {{ prometheus.resources.requests.cpu }}
        memory: {{ prometheus.resources.requests.memory }}
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: {{ prometheus.storage.classname }}
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: {{ prometheus.storage.size }}

    volumes: []
    volumeMounts: []
    additionalScrapeConfigs: []
    additionalScrapeConfigsSecret: {}
    additionalPrometheusSecretsAnnotations: {}
    additionalAlertManagerConfigs: []
    additionalAlertRelabelConfigs: []
    securityContext:
      runAsGroup: 2000
      runAsNonRoot: true
      runAsUser: 1000
      fsGroup: 2000

    priorityClassName: ""
    thanos: {}
    containers: []
    initContainers: []
    portName: "web"

  additionalServiceMonitors: []

  additionalPodMonitors: []
