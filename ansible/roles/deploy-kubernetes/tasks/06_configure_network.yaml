---
- name: create folder
  file: 
    path: "{{ ansible_env.HOME }}/{{ item }}/"
    state: directory
    mode: '750'
    owner: "{{ ansible_env.USER }}"
  loop:
    - .kube

- name: Copy admin.conf to Home directory
  become: true
  copy:
    src: "{{ kubernetes.kubeadmin_config }}"
    dest: ".kube/config"
    owner: "{{ ansible_env.USER }}"
    mode: 0600
    remote_src: true

- name: fetch kubeadm config
  become: true
  fetch:
    src: "{{ kubernetes.kubeadmin_config }}"
    dest: "/tmp/ansible/{{ global.uuid }}/"
    flat: true

- name: refresh repo
  command: helm repo update

- name: wait for etcd to be ready
  command: kubectl wait --namespace=kube-system --for=condition=ready pods etcd-{{ item }} --timeout=10s
  retries: 180
  delay: 10
  register: result
  until: result.rc == 0
  loop: "{{ groups.master }}"

- name: sleep 10 seconds
  pause:
    seconds: 10
- name:  Deploy latest version of Cilium
  block:
    - set_fact:
        template_version: "cilium-values"
      when: ansible_os_family == 'Suse' or ansible_distribution == 'Fedora' or ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'Ubuntu'
    - set_fact: 
        template_version: "cilium-values-debian"
      when: ansible_distribution == 'Debian'
    - name: deploy cilium chart
      community.kubernetes.helm:
        name: cilium
        chart_ref: vanillastack/cilium
        release_namespace: kube-system
        values: "{{ lookup('template', '{{ template_version }}.yaml.j2') | from_yaml }}"
        create_namespace: true
        wait: true
  rescue:
    - name: redeploy cilium
      community.kubernetes.helm:
        name: cilium
        chart_ref: vanillastack/cilium
        release_namespace: kube-system
        values: "{{ lookup('template', '{{ template_version }}.yaml.j2') | from_yaml }}"
        create_namespace: true
        wait: true

- set_fact:
    configuration: "{{ hostvars[inventory_hostname] }}"

- name: save vars to kubeconfig
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: cluster-config
        namespace: kube-system
      data:
        clusterConfig: |
          "{{ configuration | to_json }}"

### To get running config, execute 
### kubectl get -n kube-system cm cluster-config -o=jsonpath='{.data.clusterConfig}' | jq
          
- name: Wait for control-plane pods become ready
  command: "kubectl wait --namespace=kube-system --for=condition=Ready pods --all --timeout=600s"

- name: restart kubedns
  command: kubectl delete po -n kube-system -l k8s-app=kube-dns
