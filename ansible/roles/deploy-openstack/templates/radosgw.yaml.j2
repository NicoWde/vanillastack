---
{% if openstack.release == "stein" and commercial.enabled != true  %}
images:
  tags:
    ceph_bootstrap: 'docker.io/openstackhelm/ceph-daemon:ubuntu_bionic-20200521'
    ceph_config_helper: 'docker.io/openstackhelm/ceph-config-helper:ubuntu_bionic-20200521'
    ceph_rgw: 'docker.io/openstackhelm/ceph-daemon:ubuntu_bionic-20200521'
    dep_check: 'quay.io/airshipit/kubernetes-entrypoint:v1.0.0'
    image_repo_sync: 'docker.io/docker:17.07.0'
    rgw_s3_admin: 'docker.io/openstackhelm/ceph-config-helper:ubuntu_bionic-20200521'
    ks_endpoints: 'docker.io/openstackhelm/heat:stein-ubuntu_bionic'
    ks_service: 'docker.io/openstackhelm/heat:stein-ubuntu_bionic'
    ks_user: 'docker.io/openstackhelm/heat:stein-ubuntu_bionic'
{% endif %}
{% if openstack.release == "stein" and commercial.enabled %}
images:
  tags:
    ceph_bootstrap: '{{commercial.registry.url}}/vanillastack/ceph-daemon:ubuntu_bionic-20200521'
    ceph_config_helper: '{{commercial.registry.url}}/vanillastack/ceph-config-helper:ubuntu_bionic-20200521'
    ceph_rgw: '{{commercial.registry.url}}/vanillastack/ceph-daemon:ubuntu_bionic-20200521'
    dep_check: '{{commercial.registry.url}}/vanillastack/kubernetes-entrypoint:v1.0.0'
    rgw_s3_admin: '{{commercial.registry.url}}/vanillastack/ceph-config-helper:ubuntu_bionic-20200521'
    ks_endpoints: '{{commercial.registry.url}}/vanillastack/heat:stein-ubuntu_bionic'
    ks_service: '{{commercial.registry.url}}/vanillastack/heat:stein-ubuntu_bionic'
    ks_user: '{{commercial.registry.url}}/vanillastack/heat:stein-ubuntu_bionic'
    image_repo_sync: {{commercial.registry.url}}/vanillastack/docker:17.07.0
{% endif %}
{% if openstack.release == "train" and commercial.enabled != true  %}
images:
  tags:
    ceph_bootstrap: 'docker.io/openstackhelm/ceph-daemon:ubuntu_bionic-20200521'
    ceph_config_helper: 'docker.io/openstackhelm/ceph-config-helper:ubuntu_bionic-20200521'
    ceph_rgw: 'docker.io/openstackhelm/ceph-daemon:ubuntu_bionic-20200521'
    dep_check: 'quay.io/airshipit/kubernetes-entrypoint:v1.0.0'
    image_repo_sync: 'docker.io/docker:17.07.0'
    rgw_s3_admin: 'docker.io/openstackhelm/ceph-config-helper:ubuntu_bionic-20200521'
    ks_endpoints: 'docker.io/openstackhelm/heat:train-ubuntu_bionic'
    ks_service: 'docker.io/openstackhelm/heat:train-ubuntu_bionic'
    ks_user: 'docker.io/openstackhelm/heat:train-ubuntu_bionic'
{% endif %}
{% if openstack.release == "stein" and commercial.enabled %}
images:
  tags:
    ceph_bootstrap: '{{commercial.registry.url}}/vanillastack/ceph-daemon:ubuntu_bionic-20200521'
    ceph_config_helper: '{{commercial.registry.url}}/vanillastack/ceph-config-helper:ubuntu_bionic-20200521'
    ceph_rgw: '{{commercial.registry.url}}/vanillastack/ceph-daemon:ubuntu_bionic-20200521'
    dep_check: '{{commercial.registry.url}}/vanillastack/kubernetes-entrypoint:v1.0.0'
    rgw_s3_admin: '{{commercial.registry.url}}/vanillastack/ceph-config-helper:ubuntu_bionic-20200521'
    ks_endpoints: '{{commercial.registry.url}}/vanillastack/heat:train-ubuntu_bionic'
    ks_service: '{{commercial.registry.url}}/vanillastack/heat:train-ubuntu_bionic'
    ks_user: '{{commercial.registry.url}}/vanillastack/heat:train-ubuntu_bionic'
    image_repo_sync: {{commercial.registry.url}}/vanillastack/docker:17.07.0
{% endif %}
{% if openstack.release == "ussuri" and commercial.enabled != true  %}
images:
  tags:
    ceph_bootstrap: 'docker.io/openstackhelm/ceph-daemon:ubuntu_bionic-20200521'
    ceph_config_helper: 'docker.io/openstackhelm/ceph-config-helper:ubuntu_bionic-20200521'
    ceph_rgw: 'docker.io/openstackhelm/ceph-daemon:ubuntu_bionic-20200521'
    dep_check: 'quay.io/airshipit/kubernetes-entrypoint:v1.0.0'
    image_repo_sync: 'docker.io/docker:17.07.0'
    rgw_s3_admin: 'docker.io/openstackhelm/ceph-config-helper:ubuntu_bionic-20200521'
    ks_endpoints: 'docker.io/openstackhelm/heat:ussuri-ubuntu_bionic'
    ks_service: 'docker.io/openstackhelm/heat:ussuri-ubuntu_bionic'
    ks_user: 'docker.io/openstackhelm/heat:ussuri-ubuntu_bionic'
{% endif %}
{% if openstack.release == "ussuri" and commercial.enabled %}
images:
  tags:
    ceph_bootstrap: '{{commercial.registry.url}}/vanillastack/ceph-daemon:ubuntu_bionic-20200521'
    ceph_config_helper: '{{commercial.registry.url}}/vanillastack/ceph-config-helper:ubuntu_bionic-20200521'
    ceph_rgw: '{{commercial.registry.url}}/vanillastack/ceph-daemon:ubuntu_bionic-20200521'
    dep_check: '{{commercial.registry.url}}/vanillastack/kubernetes-entrypoint:v1.0.0'
    rgw_s3_admin: '{{commercial.registry.url}}/vanillastack/ceph-config-helper:ubuntu_bionic-20200521'
    ks_endpoints: '{{commercial.registry.url}}/vanillastack/heat:ussuri-ubuntu_bionic'
    ks_service: '{{commercial.registry.url}}/vanillastack/heat:ussuri-ubuntu_bionic'
    ks_user: '{{commercial.registry.url}}/vanillastack/heat:ussuri-ubuntu_bionic'
    image_repo_sync: {{commercial.registry.url}}/vanillastack/docker:17.07.0
{% endif %}
deployment:
  ceph: true
bootstrap:
  enabled: true
conf:
  rgw_ks:
    enabled: true
network_policy:
  ceph:
    ingress:
      - from:
        - podSelector:
            matchLabels:
              application: glance
        - podSelector:
            matchLabels:
              application: cinder
        - podSelector:
            matchLabels:
              application: libvirt
        - podSelector:
            matchLabels:
              application: nova
        - podSelector:
            matchLabels:
              application: ceph
        - podSelector:
            matchLabels:
              application: ingress
        ports:
        - protocol: TCP
          port: 8088
endpoints:
  object_store:
    host_fqdn_override:
      public:
        host: {{openstack.radosgw.endpoints.publicURLPrefix}}.{{openstack.publicDomain}}
{% if openstack.tls.enabled and openstack.tls.useCertManager %}
        tls:
          key: dummy
          crt: dummy
{% if tls.issuerName == "letsencrypt-staging" %}
          ca: |
{{tls.staging.rootCACert |b64decode| indent( width=12, indentfirst=True) }}
{% elif tls.issuerName == "letsencrypt-prod" %}
          ca: |
{{tls.prod.rootCACert | b64decode | indent( width=12, indentfirst=True) }}
{% elif tls.issuerName == "certmanager-selfsigned" %}
          ca: |
{{selfSignedCA | b64decode | indent( width=12, indentfirst=True) }}
{% endif %}
{% endif %}
    scheme:
      default: http
{% if openstack.tls.enabled %}
      public: https
    port:
      api:
        public: 443
{% endif %}
{% if openstack.tls.enabled and openstack.tls.useCertManager %}
    certs:
      swift:
        secretName: swift-tls
        issuerRef:
          name: openstack-{{tls.issuerName}}
          kind: Issuer
{% endif %}
  identity:
    name: keystone
    namespace: null
    auth:
{% if openstack.tls.enabled %}
      cacert: /tmp/openstack_ca.crt
{% endif %}
      admin:
        region_name: {{openstack.region}}
        password: {{openstack.keystone.auth.admin.password}}
        username: admin
        project_name: admin
        user_domain_name: default
        project_domain_name: default
        os_auth_type: password
        os_tenant_name: admin
      swift:
        role: admin
        region_name: {{openstack.region}}
        username: swift
        password: {{openstack.radosgw.auth.service.password}}
        project_name: service
        user_domain_name: service
        project_domain_name: service
        os_auth_type: password
        os_tenant_name: admin
network:
  api:
    ingress:
      public: true
      classes:
        namespace: "nginx"
        cluster: "nginx-cluster"
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
        kubernetes.io/ingress.class: nginx
{% if openstack.tls.enabled and openstack.tls.useCertManager %}
        kubernetes.io/tls-acme: "true"
#        nginx.ingress.kubernetes.io/backend-protocol: "https"
{% endif %}
{% if openstack.tls.enabled and openstack.tls.useCertManager %}
        cert-manager.io/issuer: "openstack-{{tls.issuerName}}"
{% endif %}
manifests:
  secret_ingress_tls: true
  network_policy: true
  configmap_etc: true
