image: "harbor.vanillastack.io/vanillastack/vanilla-ubuntu-base:20200925"
services:
  - docker:18.09.7-dind
variables:
  GIT_SUBMODULE_STRATEGY: recursive
  DOCKER_HOST: tcp://localhost:2375
  SAST_EXCLUDED_PATHS: "docs"
  SECRET_DETECTION_EXCLUDED_PATHS: "docs"
  SEARCH_MAX_DEPTH: 50
  
stages:
  - test
  - build_docker_image_dev
  - build_docker_image_testing
  - build_docker_image_prod
  - build_liveimage
  - run_playbook_fedora32
  - run_playbook_centos8
  - run_playbook_debian10
  - run_playbook_ubuntu_focal
  - run_playbook_opensuse15_2

build_docker_image_dev:
  only:
    refs:
      - backend_testing
  stage: build_docker_image_dev
  interruptible: true
  script:
    - docker login -u 'robot$build-backend-gitlab.cloudical.net' -p "$HARBOR_ROBOT_KEY_BUILD_BACKEND" harbor.cloudical.net/vanillastack
    - export VERSION=$(cat version|tr -d '\n') && echo "${VERSION}.$CI_COMMIT_SHORT_SHA" > version && export VERSION=$(cat version|tr -d '\n')
    - docker build -f docker/prod/alpine/Dockerfile -t harbor.cloudical.net/vanillastack/installer:dev-$VERSION -t harbor.cloudical.net/vanillastack/installer:dev-latest .
    - docker push harbor.cloudical.net/vanillastack/installer:dev-$VERSION
    - docker push harbor.cloudical.net/vanillastack/installer:dev-latest

build_docker_image_testing:
  only:
    refs:
      - testing
  stage: build_docker_image_testing
  interruptible: true
  allow_failure: true
  script:
    - docker login -u 'robot$build-backend-gitlab.cloudical.net' -p "$HARBOR_ROBOT_KEY_BUILD_BACKEND" harbor.cloudical.net/vanillastack
    - export VERSION=$(cat version|tr -d '\n') && echo "${VERSION}.$CI_COMMIT_SHORT_SHA" > version && export VERSION=$(cat version|tr -d '\n')
    - docker build -f docker/prod/alpine/Dockerfile -t harbor.cloudical.net/vanillastack/installer:testing-$VERSION -t harbor.cloudical.net/vanillastack/installer:testing-latest .
    - docker push harbor.cloudical.net/vanillastack/installer:testing-$VERSION
    - docker push harbor.cloudical.net/vanillastack/installer:testing-latest

build_docker_image_prod:
  only:
    refs:
      - master
  stage: build_docker_image_prod
  interruptible: true
  script:
    - docker login -u 'robot$build-backend-gitlab.cloudical.net' -p "$HARBOR_ROBOT_KEY_BUILD_BACKEND" harbor.cloudical.net/vanillastack
    - export VERSION=$(cat version|tr -d '\n') && echo "${VERSION}.$CI_COMMIT_SHORT_SHA" > version && export VERSION=$(cat version|tr -d '\n')
    - docker build -f docker/prod/alpine/Dockerfile -t harbor.cloudical.net/vanillastack/installer:$VERSION -t harbor.cloudical.net/vanillastack/installer:latest .
    - docker push harbor.cloudical.net/vanillastack/installer:$VERSION
    - docker push harbor.cloudical.net/vanillastack/installer:latest

run_playbook_centos8:
  only:
    refs:
      - testing
  stage: run_playbook_centos8
  interruptible: true
  allow_failure: true
  script:
    - curl $WEBHOOK_REDEPLOY_CENTOS8 && sleep 60
    - mkdir ~/.ssh && echo "$SSH_KEY"|base64 -d>~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
    - cd ansible
    - mv group_vars.testing group_vars
    - sed -i "s/POLYVERSE_KEY/${POLYVERSE_KEY}/g" group_vars/all/polyverse.yaml
    - sed -i "s/REGISTRY_KEY/${HARBOR_COMMERCIAL_KEY}/g" group_vars/all/global.yaml
    - ANSIBLE_CONFIG=ansible.cfg ansible-playbook -i inventory.testing type_vanillastack_deploy.yaml

run_playbook_debian10:
  only:
    refs:
      - testing
  stage: run_playbook_debian10
  interruptible: true
  allow_failure: true
  script:
    - curl $WEBHOOK_REDEPLOY_DEBIAN10 && sleep 60
    - mkdir ~/.ssh && echo "$SSH_KEY"|base64 -d>~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
    - cd ansible
    - mv group_vars.testing group_vars
    - sed -i "s/POLYVERSE_KEY/${POLYVERSE_KEY}/g" group_vars/all/polyverse.yaml
    - sed -i "s/REGISTRY_KEY/${HARBOR_COMMERCIAL_KEY}/g" group_vars/all/global.yaml
    - ANSIBLE_CONFIG=ansible.cfg ansible-playbook -i inventory.testing type_vanillastack_deploy.yaml

run_playbook_fedora32:
  only:
    refs:
      - testing
  stage: run_playbook_fedora32
  interruptible: true
  allow_failure: true
  script:
    - curl $WEBHOOK_REDEPLOY_FEDORA32 && sleep 60
    - mkdir ~/.ssh && echo "$SSH_KEY"|base64 -d>~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
    - cd ansible
    - mv group_vars.testing group_vars
    - sed -i "s/REGISTRY_KEY/${HARBOR_COMMERCIAL_KEY}/g" group_vars/all/global.yaml
    - ANSIBLE_CONFIG=ansible.cfg ansible-playbook -i inventory.testing type_vanillastack_deploy.yaml

run_playbook_opensuse15_2:
  only:
    refs:
      - testing
  stage: run_playbook_opensuse15_2
  interruptible: true
  allow_failure: true
  script:
    - curl $WEBHOOK_REDEPLOY_OPENSUSE15_2 && sleep 60
    - mkdir ~/.ssh && echo "$SSH_KEY"|base64 -d>~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
    - cd ansible
    - mv group_vars.testing group_vars
    - sed -i "s/REGISTRY_KEY/${HARBOR_COMMERCIAL_KEY}/g" group_vars/all/global.yaml
    - ANSIBLE_CONFIG=ansible.cfg ansible-playbook -i inventory.testing type_vanillastack_deploy.yaml

run_playbook_ubuntu_focal:
  only:
    refs:
      - testing
  stage: run_playbook_ubuntu_focal
  interruptible: true
  allow_failure: true
  script:
    - curl $WEBHOOK_REDEPLOY_UBUNTU_BIONIC && sleep 60
    - mkdir ~/.ssh && echo "$SSH_KEY"|base64 -d>~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
    - cd ansible
    - mv group_vars.testing group_vars
    - sed -i "s/REGISTRY_KEY/${HARBOR_COMMERCIAL_KEY}/g" group_vars/all/global.yaml
    - ANSIBLE_CONFIG=ansible.cfg ansible-playbook -i inventory.testing type_vanillastack_deploy.yaml


include:
  - local: '/live_image/.gitlab-ci.yaml'
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
